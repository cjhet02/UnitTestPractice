        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <algorithm>
        -:    4:
        -:    5:using std::string;
        -:    6:
function _ZN8PasswordC2Ev called 11 returned 100% blocks executed 53%
       11:    7:Password::Password(){
call    0 returned 11
       11:    8:  pass_history.push_back("ChicoCA-95929");
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 11
branch  5 taken 11 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 11
call    8 returned 11
call    9 never executed
call   10 never executed
       11:    9:}
call    0 never executed
        -:   10:
        -:   11:/*
        -:   12:  The function receives a string counts how many times the same character 
        -:   13:  occurs at the beginning of the string, before any other characters (or the
        -:   14:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   15:  'z' and any ASCII characters are allowed.
        -:   16:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 100%
        5:   17:int Password::count_leading_characters(string phrase){
        5:   18:  int repetition = 1;
        5:   19:  int index = 0;
        -:   20:
        5:   21:  if(phrase.length() == 0){
call    0 returned 5
branch  1 taken 1 (fallthrough)
branch  2 taken 4
        1:   22:    return 0;
        -:   23:  }
        -:   24:
        6:   25:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 6
branch  1 taken 5 (fallthrough)
branch  2 taken 1
call    3 returned 5
call    4 returned 5
branch  5 taken 2 (fallthrough)
branch  6 taken 3
branch  7 taken 2
branch  8 taken 4 (fallthrough)
        2:   26:    repetition++;
        2:   27:    index++;
        -:   28:  }
        4:   29:  return repetition;
        -:   30:}
        -:   31:
        -:   32:  /*
        -:   33:  returns whether the phrase has both at least one upper-case letter and
        -:   34:  at least one lower-case letter
        -:   35:  */
        -:   36:// bool Password::has_mixed_case(string pass){
        -:   37://   bool upper = false;
        -:   38://   bool lower = false;
        -:   39://   for (int i = 0; i < pass.size(); i++){
        -:   40://     if(pass[i] > 64 && pass[i] < 91){
        -:   41://       upper = true;
        -:   42://     } else if (pass[i] > 96 && pass[i] < 123){
        -:   43://       lower = true;
        -:   44://     }
        -:   45://   }
        -:   46://   return (upper && lower);
        -:   47:// }
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 100%
        6:   48:bool Password::has_mixed_case(string pass){
        6:   49:  bool lower = false;
        6:   50:  bool upper = false;
       27:   51:  for(int i = 0; i < pass.size(); i++){
call    0 returned 27
branch  1 taken 21
branch  2 taken 6 (fallthrough)
       21:   52:    if( pass[i] >= 'A' && pass[i] <= 'Z' ){
call    0 returned 21
branch  1 taken 15 (fallthrough)
branch  2 taken 6
call    3 returned 15
branch  4 taken 4 (fallthrough)
branch  5 taken 11
branch  6 taken 4 (fallthrough)
branch  7 taken 17
        4:   53:      upper = true;
        -:   54:    }
       17:   55:    else if( pass[i] < 'z'){
call    0 returned 17
branch  1 taken 14 (fallthrough)
branch  2 taken 3
       14:   56:      lower = true;
        -:   57:    }
        -:   58:  }
        6:   59:  return upper && lower;
branch  0 taken 3 (fallthrough)
branch  1 taken 3
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        -:   60:}
        -:   61:// bool Password::has_mixed_case(string phrase)
        -:   62:// {
        -:   63://   bool upper = false;
        -:   64://   bool lower = false;
        -:   65:
        -:   66://   //for(int i = 0; i < phrase.length()-1; i++)
        -:   67://   for(char c : phrase)
        -:   68://   {
        -:   69://     if(isupper(c))
        -:   70://     {
        -:   71://       upper = true;
        -:   72://     }
        -:   73://     if(islower(c)){
        -:   74://       lower = true;
        -:   75://     }
        -:   76://   }
        -:   77:
        -:   78://   if(upper && lower){
        -:   79://     return true;
        -:   80://   }
        -:   81:
        -:   82://   return false;
        -:   83:// }
        -:   84:
        -:   85:  /*
        -:   86:  receives a password and sets the latest in pass_history to it if and only
        -:   87:  if it meets all criteria:
        -:   88:    1. The password is at least 8 letters long
        -:   89:    2. It has no more than 3 of the same leading characters
        -:   90:    3. It has mixed case (at least one upper case and at least one lower case)
        -:   91:    4. It was not a previous password in the history
        -:   92:  */
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 72%
        1:   93:void Password::set(string newPass){
       1*:   94:  if(newPass.length() >= 8 && count_leading_characters(newPass) <= 3 && has_mixed_case(newPass)){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
branch  9 taken 1 (fallthrough)
branch 10 taken 0
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
branch 17 taken 1 (fallthrough)
branch 18 taken 0
branch 19 taken 1 (fallthrough)
branch 20 taken 0
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0
call   24 returned 1
branch 25 taken 1 (fallthrough)
branch 26 taken 0
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
call   33 never executed
        -:   95:    //if password is not in pass_history vector
        1:   96:    if(std::find(Password::pass_history.begin(), Password::pass_history.end(), newPass) == Password::pass_history.end()){
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:   97:      Password::pass_history.push_back(newPass);
call    0 returned 1
        -:   98:    }
        -:   99:  }
        1:  100:}
        -:  101:
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 83%
        2:  102:bool Password::authenticate(string pass){
       2*:  103:  if(Password::pass_history.size() == 0 || pass != Password::pass_history[pass_history.size()-1])
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
call    3 returned 2
call    4 returned 2
call    5 returned 2
branch  6 taken 0 (fallthrough)
branch  7 taken 2
branch  8 taken 0 (fallthrough)
branch  9 taken 2
    #####:  104:    return false;
        2:  105:  return true;
        -:  106:}
